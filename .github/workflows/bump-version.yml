# GitHub Actions Workflow: Automated Version Bumping and Milestone Management
# Description: Automates version bumping, branch creation, pull request generation, and milestone management.

name: Automated Version Bump

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Optional version string for the next release.'
        required: false
        type: string
        default: ''
      auto_approve_pr:
        description: 'Automatically approve the created PR.'
        required: false
        type: boolean
        default: false
      skip_milestone:
        description: 'Skip creating or closing milestones.'
        required: false
        type: boolean
        default: false

permissions: write-all

jobs:
  bump-version:
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.COSTELLOBOT_TOKEN }}

      - name: Bump version
        id: bump-version
        shell: pwsh
        env:
          NEXT_VERSION: ${{ inputs.version }}
        run: |
          $properties = Join-Path "." "Directory.Build.props"

          if (-Not (Test-Path $properties)) {
            throw "Version file '$properties' not found!"
          }

          $xml = [xml](Get-Content $properties)
          $versionPrefix = $xml.SelectSingleNode('Project/PropertyGroup/VersionPrefix')

          if (-Not $versionPrefix) {
            throw "VersionPrefix node not found in $properties."
          }

          if (-Not [string]::IsNullOrEmpty(${env:NEXT_VERSION})) {
            $version = [System.Version]::new(${env:NEXT_VERSION})
          } else {
            $version = [System.Version]::new($versionPrefix.InnerText)
            $version = [System.Version]::new($version.Major, $version.Minor, $version.Build + 1)
          }

          $updatedVersion = $version.ToString()
          $versionPrefix.InnerText = $updatedVersion

          $settings = New-Object System.Xml.XmlWriterSettings
          $settings.Encoding = New-Object System.Text.UTF8Encoding($false)
          $settings.Indent = $true
          $settings.OmitXmlDeclaration = $true

          $writer = [System.Xml.XmlWriter]::Create($properties, $settings)
          $xml.Save($writer)
          $writer.Close()

          "version=${updatedVersion}" >> $env:GITHUB_OUTPUT

      - name: Push changes to GitHub
        if: steps.bump-version.outputs.version
        run: |
          # Commit and push changes to a new branch
          $branchName = "bump-version-${env:NEXT_VERSION}"
          git config user.email "${{ vars.GIT_COMMIT_USER_EMAIL }}"
          git config user.name "${{ vars.GIT_COMMIT_USER_NAME }}"
          git checkout -b $branchName
          git add .
          git commit -m "Bump version to ${env:NEXT_VERSION}"
          git push origin $branchName
          echo "branch-name=${branchName}" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const branchName = process.env.branch_name;
            const title = `Bump Version to ${process.env.version}`;
            const body = [
              `This PR bumps the version to ${process.env.version}.`,
              'Generated by GitHub Actions.',
            ].join('\n\n');

            const pr = await github.rest.pulls.create({
              owner,
              repo,
              head: branchName,
              base: context.ref.replace('refs/heads/', ''),
              title,
              body,
              draft: false
            });

            console.log(`Pull Request created: ${pr.html_url}`);

  close-milestone:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && inputs.skip_milestone == 'false'

    steps:
      - name: Close Milestone
        uses: actions/github-script@v7
        env:
          RELEASE_DATE: ${{ github.event.release.published_at }}
          RELEASE_VERSION: ${{ github.event.release.tag_name }}
        with:
          github-token: ${{ secrets.COSTELLOBOT_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const version = process.env.RELEASE_VERSION;

            const milestones = await github.rest.issues.listMilestones({
              owner,
              repo,
              state: 'open',
            });

            const milestone = milestones.data.find((m) => m.title === version);

            if (milestone) {
              await github.rest.issues.updateMilestone({
                owner,
                repo,
                milestone_number: milestone.number,
                state: 'closed',
                due_on: process.env.RELEASE_DATE,
              });
              console.log(`Closed milestone: ${version}`);
            } else {
              console.log(`No milestone found for version: ${version}`);
            }
